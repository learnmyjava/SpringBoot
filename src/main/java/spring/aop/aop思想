oop 面向对象编程，它引入封装 继承 多态 等特性来建立对象的层次结构，用来模拟公共行为，而当需要为分散的对象引入公共行为的时候 oop则无能为力了。
oop是自上而下 纵向的逻辑开发。不适用水平方向。
像日志功能，安全性，异常处理等功能往往水平的散布在所有对象层次中，却与核心功能无关。
在oop的设计中，这种情况导致了大量代码的重复，而不利于各个模块的复用。

AOP面向切面编程，它是对oop的补充。它利于一种称为横切的技术，剖开被封装的对象，将那些影响了多个类的公共行为 且与核心无关的代码块 封装成一个可重复利用的模块，称为切面
以减少系统的重复代码，降低模块间的耦合度
AOP把软件系统分为两个部分：核心关注点和横切关注点 ；业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点